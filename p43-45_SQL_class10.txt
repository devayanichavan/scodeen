--Over Clause
--Over clause combined with a partition by clause and is used to divide data into partitions.

--syntax:
--function() over (partition by col1,col2 ...etc)
--Along with functions like Count(),AVG(),Max(),Min(),sum(),rank(),dense_rank() and rownumber() etc.


create table over_Test(EMPID int, FirstName varchar(20),Gender varchar(2),salary int)

 insert into over_Test values(1,'Mohini','F',1000)
 insert into over_Test values(2,'Rohit','M',2000)
 insert into over_Test values(3,'Amit','M',4000)
 insert into over_Test values(4,'Sonal','F',5000)
 insert into over_Test values(5,'Minal','F',6000)
 insert into over_Test values(6,'Amar','M',3600)
 insert into over_Test values(7,'Shital','F',4500)
 insert into over_Test values(8,'Sohil','M',6000)
 insert into over_Test values(9,'praveen','F',9000)
 insert into over_Test values(10,'Mithali','F',9000)
 insert into over_Test values(11,'seema','F',9000)
 insert into over_Test values(12,'meena','F',10000)
 select * from over_Test 
 
 --Aggreagted male and female details
 select gender, count(*) as totalcount ,avg(salary) as avgsal ,max(salary) as maxsal, min(salary) as minsal from over_Test
 group by Gender

--Below query only find max salary from table
but not display the other column information
select  max(salary)Max_salary from over_Test

--by using sub-Query it can be possible
select * from over_test where salary in
(select  max(salary)Max_salary from over_Test)


  select FirstName,gender, count(*) as totalcount ,avg(salary) as avgsal ,max(salary) as maxsal, min(salary) as minsal from over_Test
 group by Gender,FirstName


--Instead of writing the above statement we can replace by using over clause
select empid,FirstName,salary,Gender
,count(gender) over (Partition by gender) as totalcount
,avg(salary) over (Partition by gender) as avgsal
,max(salary) over (Partition by gender) as maxsal
,min(salary) over (Partition by gender) as minsal
,sum(salary) over (Partition by gender) as TotalSalary
,sum(salary) over (Partition by gender order by empid) as Totalrunningsalary
from over_Test

--Q. Need to calculate the Running salary from emp_over table over partition by Gender.

--RANK,DENSE RANK AND ROW NUMBER

--Rank() and DenseRank()
--It will return a rank starting at 1 based on ordering of rows and imposed by order by clause.
--Order by clause is required mandatory.
--PARTITION BY Clause is optional.

--Rank Syntax: RANK() OVER (ORDER BY col1,col2,....coln ASC/DESC [PARTITION BY Col1,col2...coln]) 

--Dense_Rank Syntax: DENSE_RANK() OVER (ORDER BY col1,col2,....coln ASC/DESC [PARTITION BY Col1,col2...coln])

--example
--Marks =496,496,495,494,494,490
--rank = 1,1,3,4,4,6
--Dense_rank = 1,1,2,3,3,4

--Example:
--[sal] = [1000,1000,2000,3000,4000]
--Rank() -- [1,1,3,4,5]   
--Dense_rank() --[1,1,2,3,4] -- school level mark inside the class
select * ,rank() over (order by salary) as rank1 from over_Test
select * ,dense_rank() over (order by salary) as denserank from over_Test

--Q.What is the diffrence between Rank() and Dense_Rank()
--Rank() -- Rank function skips ranking if there is same value or number.
--Dense_Rank() --It will not skips ranking if their is same value or number.

-- highest salary by using rank and dense rank

select * ,rank() over (order by salary) as rank1 from over_Test where rank() over (order by salary) = 2

select * ,dense_rank() over (order by salary) as denserank from over_Test where dense_rank() over (order by salary)=2
--The above query will through an exception in
--i.e. Windowed functions can only appear in the SELECT or ORDER BY clauses.

--In order to avoid this kind of exception or Error in SQl we have to use CTE i.e COMMON TBALE EXPRESSION 

--CTE (Common Table Expression)
--It is temporary result set.
--It will store the temporary results to make use of that in your main query.
--It can be referred within a SELECT,INSERT,UPDATE and DELETE statements that immediately follows the CTE.
--Only DML type of operation we can perform on CTE

--Syntax 
--With CTE_NAME (COL1, COL2,.....etc)
--AS
--CTE_Query

--second and Third highest salary by using max and top function
select min(salary) from over_Test where salary in 
(select top 3 salary from over_Test order by salary desc)

--Third highest salary  by using Rank fuction
with HighestSal as
(select * ,rank() over (order by salary desc) as rank1 from over_Test ) 
select * from HighestSal where rank1 = 3

---by using dense_rank()
with HighestSal as
(select *,dense_rank() over (order by salary desc) as denserank1 from over_Test ) 
select * from HighestSal where denserank1 = 3;

----for lowest salary
with LowestSal as
(select *,dense_rank() over (order by salary) as rank1 from over_Test ) 
select * from LowestSal where rank1 = 1;

--second and Third highest salary  by using dense Rank fuction

create table student (S_ID int,S_NAME varchar(20),LOC varchar (20),Dept varchar(20))

select * from student where S_ID =1

insert into student values(1,'praveen','mumbai','ETL')
insert into student values(2,'Rohit','Mumbai','Testing')
insert into student values(3,'Akash','Jaipur','HR')
insert into student values(4,'Sada','Warangal','HR')
insert into student values(5,'Rajesh','Hyderabad','Account')
insert into student values(6,'Umesh','Kolar','CCD')



--2.All the column from table need to include in select and group  by list
select S_ID,S_NAME,LOC,Dept,count(*) as duplicate from student group by S_ID,S_NAME,LOC,Dept having count(*) > 1

--ROW NUMBER
--It will return the sequential number of row starting at 1
--Order by clause is required.
--PARTITION BY clause is optional
--When the data is partitioned, row number reset to 1 when the partition changes.

--syantx
--ROW_NUMBER() OVER(ORDER BY Col1,col2)
select *, ROW_NUMBER() over (order by salary  ) as RowNo from over_Test


